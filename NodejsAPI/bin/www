#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('express');
var app = require('../app');
var debug = require('debug')('web:server');
var https = require('https');
var fs = require('fs');
var db = require('../database/db');

var expressWs = require('express-ws');
var raspividStream = require('raspivid-stream');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var certificates = require('../certificates');
var option = {
  key: fs.readFileSync(certificates.key),
  cert: fs.readFileSync(certificates.cert),
  ca: fs.readFileSync(certificates.ca)
}
var server = https.createServer(option, app);

expressWs(app, server);
var video = require('../routes/video');
app.use('/', video);
/*app.ws('/video-stream', (ws, req) => {
    console.log('Client connected');

    ws.send(JSON.stringify({
      action: 'init',
      width: '960',
      height: '540'
    }));

    var videoStream = raspividStream({ rotation: 180 });

    videoStream.on('data', (data) => {
        ws.send(data, { binary: true }, (error) => { if (error) console.error(error); });
    });

    ws.on('close', () => {
        console.log('Client left');
        videoStream.removeAllListeners('data');
    });
});
*/

/**
 * Connect to db.
 */

db.connect();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "0.0.0.0", function() {
  console.log('Server started on port %d', server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
